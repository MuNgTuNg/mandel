#version 410 core

layout(location=0) in ivec2 UV;

flat out int itCount;

uniform dvec4 centre;
uniform dvec4 scale;

uniform ivec4 params;
int maxI = params.x;
int width = params.y;
int height = params.z;
int res = params.w;

uniform isampler2D inTex;

dvec2 sqr(in dvec2 z){
	return dvec2(z.x * z.x - z.y * z.y, 2 * z.x * z.y);
}

double magpow2(in dvec2 z){
	return z.x * z.x + z.y * z.y;
}

void main(){
	gl_Position.xy = vec2(2.0*float(UV.x)/(width-1)-1.0, 2.0*float(UV.y)/(height-1)-1.0);
	gl_Position.z = 0.0;
	gl_Position.w = 1.0;

	dvec2 c = dvec2(gl_Position.x*scale.x+centre.x,gl_Position.y*scale.z+centre.z);
	dvec2 z = dvec2(0,0);

    int iv = texelFetch( inTex, UV, 0).r;

	if (iv < 0) {
		ivec2 parent = ivec2((UV.x / 2/ res) * 2 * res,(UV.y / 2/ res) * 2 * res);
		int parentI = texelFetch( inTex, parent, 0).r;
		bool same = false;
		if (parentI > -1 && parent != UV)
		{
			same = true;
			for (int pY = -1; pY < 2; pY++)
			{
				for (int pX = -1; pX < 2; pX++)
				{
					ivec2 peer = ivec2(parent.x + 2 * res * pX, parent.y + 2 * res * pY);
					if (peer.x >= 0 && peer.y >= 0 && peer.x < width && peer.y < height)
					{
						if (texelFetch(inTex, peer, 0).r != parentI)
						{
							same = false;
						}
					}
				}
			}
		}
		if (same) itCount = parentI;
		else
		{
			itCount = 0;
			for (int i=0;i<maxI;i++) {
				if (magpow2(z) > 4) {
					itCount = i;	
					break;
				}
				z = sqr(z)+c;
			}
		}
	} else {
		itCount = iv;
	}

}